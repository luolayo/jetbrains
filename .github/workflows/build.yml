name: Build Multi-Platform

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  APP_NAME: 'jetbrains'

jobs:
  # macOS 构建
  build-macos:
    name: macOS (${{ matrix.arch }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64, universal]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install UPX
        run: brew install upx

      - name: Build application
        run: |
          wails build -platform darwin/${{ matrix.arch }} -upx -clean
        env:
          CGO_ENABLED: 1

      - name: Create archive
        run: |
          cd build/bin
          zip -r ../../${{ env.APP_NAME }}-darwin-${{ matrix.arch }}.zip *.app

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-darwin-${{ matrix.arch }}
          path: ${{ env.APP_NAME }}-darwin-${{ matrix.arch }}.zip
          retention-days: 7

  # Windows 构建
  build-windows:
    name: Windows (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install UPX
        run: choco install upx -y

      - name: Build application
        run: |
          wails build -platform windows/${{ matrix.arch }} -upx -clean
        shell: bash
        env:
          CGO_ENABLED: 1

      - name: Create archive
        run: |
          cd build/bin
          7z a ../../${{ env.APP_NAME }}-windows-${{ matrix.arch }}.zip *.exe
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows-${{ matrix.arch }}
          path: ${{ env.APP_NAME }}-windows-${{ matrix.arch }}.zip
          retention-days: 7

  # Linux 构建
  build-linux:
    name: Linux (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            upx

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Build application
        run: |
          wails build -platform linux/${{ matrix.arch }} -upx -clean
        env:
          CGO_ENABLED: 1

      - name: Create archive
        run: |
          cd build/bin
          tar -czf ../../${{ env.APP_NAME }}-linux-${{ matrix.arch }}.tar.gz *

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux-${{ matrix.arch }}
          path: ${{ env.APP_NAME }}-linux-${{ matrix.arch }}.tar.gz
          retention-days: 7

  # 创建 Release
  release:
    name: Create Release
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} release-assets/ \;
          ls -lh release-assets/

      - name: Generate checksums
        run: |
          cd release-assets
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## 🎉 Release ${{ steps.version.outputs.version }}

            ### 📦 下载

            选择适合您系统的版本下载：

            #### macOS
            - **Apple Silicon (M1/M2/M3)**: `jetbrains-darwin-arm64.zip`
            - **Intel**: `jetbrains-darwin-amd64.zip`
            - **Universal (所有 Mac)**: `jetbrains-darwin-universal.zip`

            #### Windows
            - **x64**: `jetbrains-windows-amd64.zip`
            - **ARM64**: `jetbrains-windows-arm64.zip`

            #### Linux
            - **x64**: `jetbrains-linux-amd64.tar.gz`
            - **ARM64**: `jetbrains-linux-arm64.tar.gz`

            ### 📝 安装说明

            1. 下载对应平台的压缩包
            2. 解压缩文件
            3. macOS: 打开 .app 文件
            4. Windows: 运行 .exe 文件
            5. Linux: 添加执行权限后运行

            ### ✅ 校验和

            请查看 `checksums.txt` 文件以验证下载的完整性。

            ```bash
            sha256sum -c checksums.txt
            ```

            ---

            **完整变更日志**: https://github.com/${{ github.repository }}/commits/${{ github.sha }}
          files: |
            release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建摘要
  summary:
    name: Build Summary
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| macOS | ${{ needs.build-macos.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Windows | ${{ needs.build-windows.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Linux | ${{ needs.build-linux.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
