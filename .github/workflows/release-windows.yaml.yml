name: Release Windows App

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag'
        required: true
        default: '1.0.0'

permissions:
  contents: write

jobs:
  release:
    name: Release Windows App
    runs-on: windows-latest
    strategy:
      matrix:
        platform:
          - windows/amd64
          - windows/arm64
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Normalise platform tag
        id: normalise_platform
        shell: bash
        run: |
          tag=$(echo ${{ matrix.platform }} | sed -e 's/\//_/g' -e 's/amd64/x64/g')
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Normalise platform name
        id: normalise_platform_name
        shell: bash
        run: |
          pname=$(echo "${{ matrix.platform }}" | sed 's/windows\///g')
          echo "pname=$pname" >> "$GITHUB_OUTPUT"

      - name: Normalise version tag
        id: normalise_version
        shell: bash
        run: |
          if [ "${{ github.event.release.tag_name }}" == "" ]; then
            version=$(echo ${{ github.event.inputs.tag }} | sed -e 's/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          else
            version=$(echo ${{ github.event.release.tag_name }} | sed -e 's/v//g')
            echo "version=$version" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: stable

      - name: Install chocolatey
        uses: crazy-max/ghaction-chocolatey@v2
        with:
          args: install nsis jq -y

      - name: Add NSIS to PATH
        shell: pwsh
        run: |
          echo "C:\Program Files (x86)\NSIS" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "NSIS installed at: C:\Program Files (x86)\NSIS"
          if (Test-Path "C:\Program Files (x86)\NSIS\makensis.exe") {
            echo "makensis.exe found"
          } else {
            echo "Warning: makensis.exe not found at expected location"
          }

      - name: Install wails
        shell: bash
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Install garble
        shell: bash
        run: go install mvdan.cc/garble@latest

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Build frontend assets
        shell: bash
        run: |
          npm install -g npm@9
          jq '.info.productVersion = "${{ steps.normalise_version.outputs.version }}"' wails.json > tmp.json
          mv tmp.json wails.json
          cd frontend
          jq '.version = "${{ steps.normalise_version.outputs.version }}"' package.json > tmp.json
          mv tmp.json package.json
          npm install

      - name: Build Windows portable app
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -clean -platform ${{ matrix.platform }} \
          -webview2 embed \
          -ldflags "-X main.version=v${{ steps.normalise_version.outputs.version }} -X main.gaMeasurementID=${{ secrets.GA_MEASUREMENT_ID }} -X main.gaSecretKey=${{ secrets.WINDOWS_GA_SECRET }}"

      - name: Compress portable binary
        working-directory: ./build/bin
        run: Compress-Archive "jetbrains.exe" "jetbrains_Portable_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.zip"

      - name: Upload release asset (Portable)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.normalise_version.outputs.version }}
          files: ./build/bin/jetbrains_Portable_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Windows NSIS installer
        shell: bash
        run: |
          CGO_ENABLED=1 wails build -platform ${{ matrix.platform }} \
          -nsis -webview2 embed \
          -ldflags "-X main.version=v${{ steps.normalise_version.outputs.version }}" \
          -o jetbrains-installer

      - name: Verify installer was created
        shell: bash
        run: |
          echo "Listing build/bin directory:"
          ls -la build/bin/

          # Wails adds architecture suffix to installer filename
          ARCH="${{ steps.normalise_platform_name.outputs.pname }}"
          INSTALLER_NAME="jetbrains-${ARCH}-installer.exe"

          if [ -f "build/bin/${INSTALLER_NAME}" ]; then
            echo "✓ Installer found: build/bin/${INSTALLER_NAME}"
            # Rename to expected name for signing
            mv "build/bin/${INSTALLER_NAME}" "build/bin/jetbrains-installer.exe"
          else
            echo "✗ Installer NOT found! Expected: ${INSTALLER_NAME}"
            exit 1
          fi

      # Code signing disabled for personal project
      # - name: Sign the installer
      #   uses: dlemstra/code-sign-action@v1
      #   with:
      #     certificate: ${{ secrets.WIN_SIGNING_CERT }}
      #     password: ${{ secrets.WIN_SIGNING_CERT_PASSWORD }}
      #     folder: ./build/bin

      - name: Sign installer with Sigstore
        shell: bash
        run: |
          cosign sign-blob --yes \
            --bundle ./build/bin/jetbrains-installer.exe.bundle \
            ./build/bin/jetbrains-installer.exe

      - name: Rename installer
        working-directory: ./build/bin
        run: Rename-Item -Path "jetbrains-installer.exe" -NewName "jetbrains_Setup_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.exe"

      - name: Rename installer signature bundle
        working-directory: ./build/bin
        run: Rename-Item -Path "jetbrains-installer.exe.bundle" -NewName "jetbrains_Setup_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.exe.bundle"

      - name: Upload release asset (Installer)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.normalise_version.outputs.version }}
          files: |
            ./build/bin/jetbrains_Setup_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.exe
            ./build/bin/jetbrains_Setup_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.exe.bundle
          token: ${{ secrets.GITHUB_TOKEN }}